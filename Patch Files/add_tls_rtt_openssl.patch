Index: openssl-3.0.5/include/openssl/ssl.h.in
===================================================================
--- openssl-3.0.5.orig/include/openssl/ssl.h.in
+++ openssl-3.0.5/include/openssl/ssl.h.in
@@ -1914,6 +1914,7 @@ __owur int SSL_get_early_data_status(con
 
 __owur int SSL_get_error(const SSL *s, int ret_code);
 __owur const char *SSL_get_version(const SSL *s);
+__owur long SSL_get_rtt(const SSL *s);
 
 /* This sets the 'default' SSL version that SSL_new() will create */
 # ifndef OPENSSL_NO_DEPRECATED_3_0
Index: openssl-3.0.5/ssl/ssl_lib.c
===================================================================
--- openssl-3.0.5.orig/ssl/ssl_lib.c
+++ openssl-3.0.5/ssl/ssl_lib.c
@@ -4005,6 +4005,15 @@ const char *SSL_get_version(const SSL *s
     return ssl_protocol_to_string(s->version);
 }
 
+/*
+ * SSL_get_rtt retrieves the RTT value for a connection in microseconds
+ * These units NGINX's $tcpinfo_rtt variable (available through SSL module)
+*/
+__owur long SSL_get_rtt(const SSL *s)
+{
+    return (long)(s->rtt / 1000);
+}
+
 static int dup_ca_names(STACK_OF(X509_NAME) **dst, STACK_OF(X509_NAME) *src)
 {
     STACK_OF(X509_NAME) *sk;
Index: openssl-3.0.5/ssl/ssl_local.h
===================================================================
--- openssl-3.0.5.orig/ssl/ssl_local.h
+++ openssl-3.0.5/ssl/ssl_local.h
@@ -1218,9 +1218,16 @@ struct ssl_st {
     /* SSLv3 */
     const SSL_METHOD *method;
     /*
-     * There are 2 BIO's even though they are normally both the same.  This
-     * is so data can be read and written to different handlers
-     */
+     * When the write_finished stage of the handshake has ended.
+     * Used to calculate the connection rtt.
+    */
+    uint64_t write_finished;
+    /*
+     * Round trip time for SSL connection.
+     * Generated in ./statem/statem_srvr.c by taking difference in
+     * nanoseconds between the WriteFinished and ReadFinished stages of handshake.
+    */
+    uint64_t rtt;
     /* used by SSL_read */
     BIO *rbio;
     /* used by SSL_write */
Index: openssl-3.0.5/ssl/statem/statem_srvr.c
===================================================================
--- openssl-3.0.5.orig/ssl/statem/statem_srvr.c
+++ openssl-3.0.5/ssl/statem/statem_srvr.c
@@ -27,6 +27,56 @@
 #include <openssl/core_names.h>
 #include <openssl/asn1t.h>
 
+uint64_t time_now(void)
+{
+    uint64_t r;
+
+#if defined(_WIN32)
+    SYSTEMTIME st;
+    union {
+        unsigned __int64 ul;
+        FILETIME ft;
+    } now;
+
+    GetSystemTime(&st);
+    SystemTimeToFileTime(&st, &now.ft);
+    /* re-bias to 1/1/1970 */
+# ifdef  __MINGW32__
+    now.ul -= 116444736000000000ULL;
+# else
+    now.ul -= 116444736000000000UI64;
+# endif
+    r = ((uint64_t)now.ul) * ((uint64_t)1000000000 / 10000000);
+#else   /* defined(_WIN32) */
+    struct timeval t;
+
+    if (gettimeofday(&t, NULL) < 0) {
+        ERR_raise_data(ERR_LIB_SYS, get_last_sys_error(),
+                       "calling gettimeofday()");
+        return 0;
+    }
+    if (t.tv_sec <= 0)
+        r = t.tv_usec <= 0 ? 0 : t.tv_usec * 1000;
+    else
+        r = ((uint64_t)t.tv_sec * 1000000 + t.tv_usec) * 1000;
+#endif  /* defined(_WIN32) */
+    return r;
+}
+
+static ossl_unused ossl_inline
+uint64_t time_subtract(uint64_t a, uint64_t b)
+{
+    return a - b;
+}
+
+/* Returns |a - b|. */
+static ossl_unused ossl_inline
+uint64_t time_abs_difference(uint64_t a, uint64_t b)
+{
+    return a > b ? time_subtract(a, b)
+                     : time_subtract(b, a);
+}
+
 #define TICKET_NONCE_SIZE       8
 
 typedef struct {
@@ -490,6 +540,7 @@ static WRITE_TRAN ossl_statem_server13_w
 
     case TLS_ST_SW_FINISHED:
         st->hand_state = TLS_ST_EARLY_DATA;
+        s->write_finished = time_now();
         return WRITE_TRAN_CONTINUE;
 
     case TLS_ST_EARLY_DATA:
@@ -515,6 +566,18 @@ static WRITE_TRAN ossl_statem_server13_w
             st->hand_state = TLS_ST_SW_SESSION_TICKET;
         else
             st->hand_state = TLS_ST_OK;
+
+        s->rtt = time_abs_difference(time_now(), s->write_finished);
+        printf("READ FINISHED! %ld microseconds\n", (long)(s->rtt / 1000));
+        FILE *rttlogfile = fopen("/tmp/openssl_rtt.log", "a");
+        if (rttlogfile == NULL)
+            perror("Can't open rtt log file");
+        else
+        {
+            fprintf(rttlogfile, "RTT TIME: %ld microseconds\n", (long)(s->rtt / 1000));
+            fclose(rttlogfile);
+        }
+
         return WRITE_TRAN_CONTINUE;
 
     case TLS_ST_SR_KEY_UPDATE:
@@ -645,6 +708,7 @@ WRITE_TRAN ossl_statem_server_write_tran
         return WRITE_TRAN_CONTINUE;
 
     case TLS_ST_SW_SRVR_DONE:
+        s->write_finished = time_now();
         return WRITE_TRAN_FINISHED;
 
     case TLS_ST_SR_FINISHED:
@@ -656,6 +720,18 @@ WRITE_TRAN ossl_statem_server_write_tran
         } else {
             st->hand_state = TLS_ST_SW_CHANGE;
         }
+
+        s->rtt = time_abs_difference(time_now(), s->write_finished);
+        printf("READ FINISHED! %ld microseconds\n", (long)(s->rtt / 1000));
+        FILE *rttlogfile = fopen("/tmp/openssl_rtt.log", "a");
+        if (rttlogfile == NULL)
+            perror("Can't open rtt log file");
+        else
+        {
+            fprintf(rttlogfile, "RTT TIME: %ld microseconds\n", (long)(s->rtt / 1000));
+            fclose(rttlogfile);
+        }
+
         return WRITE_TRAN_CONTINUE;
 
     case TLS_ST_SW_SESSION_TICKET:
@@ -4107,4 +4183,4 @@ MSG_PROCESS_RETURN tls_process_end_of_ea
     }
 
     return MSG_PROCESS_CONTINUE_READING;
-}
+}
\ No newline at end of file
Index: openssl-3.0.5/util/libssl.num
===================================================================
--- openssl-3.0.5.orig/util/libssl.num
+++ openssl-3.0.5/util/libssl.num
@@ -520,3 +520,4 @@ SSL_load_client_CA_file_ex
 SSL_set0_tmp_dh_pkey                    521	3_0_0	EXIST::FUNCTION:
 SSL_CTX_set0_tmp_dh_pkey                522	3_0_0	EXIST::FUNCTION:
 SSL_group_to_name                       523	3_0_0	EXIST::FUNCTION:
+SSL_get_rtt                             524 3_0_0   EXIST::FUNCTION:
\ No newline at end of file
